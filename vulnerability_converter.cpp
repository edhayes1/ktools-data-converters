#include <iostream>
#include <unistd.h>
#include <stdio.h>
#include <vector>

using namespace std;

int damage_bins_ = -1;

#pragma pack(push, 1)
struct Vulnerability
{
	int vulnerability_id;
	int intensity_bin_id;
	int damage_bin_id;
	float probability;
};

struct Vulnerability_doub
{
	int vulnerability_id;
	int intensity_bin_id;
	int damage_bin_id;
	double probability;
};
#pragma pack(pop)


void readvulns(vector<Vulnerability_doub> &vuln_vec)
{

	fread(&damage_bins_, sizeof(damage_bins_), 1, stdin);	// drop the bins

	Vulnerability q;
	Vulnerability_doub qd;
	int i = fread(&q, sizeof(q), 1, stdin);

	while (i != 0) {
		qd.vulnerability_id = q.vulnerability_id;
		qd.intensity_bin_id = q.intensity_bin_id;
		qd.damage_bin_id = q.damage_bin_id;
		qd.probability = static_cast<double>(q.probability);	
		vuln_vec.push_back(qd);
		i = fread(&q, sizeof(q), 1, stdin);
	}
}

void writevulns(vector<Vulnerability_doub> &vuln_vec)
{
	fwrite(&damage_bins_, sizeof(damage_bins_), 1, stdout);

	for (auto v : vuln_vec){
        fwrite(&v, sizeof(v), 1, stdout);
    }
}

int main(){
	auto vuln_vec = vector<Vulnerability_doub>();
	readvulns(vuln_vec);
	writevulns(vuln_vec);
}